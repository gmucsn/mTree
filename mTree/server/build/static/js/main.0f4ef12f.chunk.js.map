{"version":3,"sources":["components/SocketClientComponent.js","components/Home.js","components/SubjectPool.js","components/ComponentList.js","components/ExperimentConfigurations.js","App.js","serviceWorker.js","index.js"],"names":["instance","this","agents","institutions","environments","socket","io","connect","on","data","console","log","processMessage","_data","message","subjectPoolIDs","subjectPool","configurations","emit","Home","useStyles","makeStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","table","minWidth","SubjectPool","classes","useState","setSubjectPoolIDs","setSubjectPool","useEffect","SocketClientComponent","getSubjectPool","Paper","TableContainer","component","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","ComponentList","setAgents","setInstitutions","setEnvironments","getComponentList","Grid","container","direction","justify","alignItems","item","ExperimentConfigurations","useRouteMatch","path","url","setConfigurations","configuration","setConfiguration","getConfigurations","exact","to","onClick","display","toolbar","paddingRight","toolbarIcon","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","paddingTop","paddingBottom","flexDirection","fixedHeight","App","echo","sendMessage","React","open","setOpen","clsx","CssBaseline","AppBar","Toolbar","IconButton","edge","color","Typography","variant","noWrap","Badge","badgeContent","Drawer","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f4ef12f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:5000/admin\";\n\n// export default function SocketClientComponent() {\n//   const [response, setResponse] = useState(\"\");\n\n//   useEffect(() => {\n//     const socket = socketIOClient(ENDPOINT);\n//     console.log(\"CONNECTING\")\n//     socket.on(\"FromAPI\", data => {\n//       setResponse(data);\n//     });\n\n//   }, []);\n\n//   return (\n//     <p>\n//       It's <time dateTime={response}>{response}</time>\n//     </p>\n//   );\n// }\n\n\n\nclass SocketClientComponent {\n    constructor(){\n        this.agents = null;\n        this.institutions = null;\n        this.environments = null;\n\n      this.socket = io.connect(ENDPOINT);\n\n      this.socket.on('chat', (data) => {console.log(\"RECIEVED A MESSAGAE\");\n            this.processMessage(data);\n        });\n\n        this.socket.on('response', (data) => {\n            console.log(\"RECIEVED A MESSAGAE\");\n            this.processMessage(data);\n        });\n\n      this._data = [];\n      console.log(\"STUFF here too\");\n    }\n\n    componentRegister(agents, institutions, environments){\n        this.agents = agents;\n        this.institutions = institutions;\n        this.environments = environments;\n    }\n\n    processMessage(message){\n        console.log(\"****************\");\n        console.log(message);\n        console.log(\"^^^^^^^^^^^^^^^^^^^^^^^\");\n        if (message[\"message\"] == \"component_list\"){\n            this.agents(message[\"data\"][\"agents\"]);\n            this.institutions(message[\"data\"][\"institutions\"]);\n            this.environments(message[\"data\"][\"environments\"]);\n            console.log(this.agents);\n        } else if (message[\"message\"] == \"subject_pool_data\"){\n            this.subjectPoolIDs(message[\"data\"][\"subject_ids\"]);\n            this.subjectPool(message[\"data\"][\"subject_hash\"]);\n            console.log(\"Should have set subject pool info\");\n        } else if (message[\"message\"] == \"configuration_data\"){\n            this.configurations(message[\"data\"]);\n            console.log(\"Should have set subject pool info\");\n        } else {\n            console.log(\"SOME OTHER MESSAGE\");\n        }\n    }\n\n    sendMessage(){\n\n        this.socket.emit(\"message\", \"HUOPPLA\");\n    }\n\n    getComponentList(agents, institutions, environments){\n        this.agents = agents;\n        this.institutions = institutions;\n        this.environments = environments;\n        this.socket.emit(\"get_components\", \"\");\n    }\n\n    getSubjectPool(subjectPoolIDs, subjectPool){\n        this.subjectPoolIDs = subjectPoolIDs;\n        this.subjectPool = subjectPool;\n        this.socket.emit(\"get_subject_pool\", \"\");\n        console.log(\"should be getting subjec tpool\")\n    }\n\n    getConfigurations(configurations){\n        this.configurations = configurations;\n        this.socket.emit(\"get_configurations\", \"\");\n        console.log(\"should be getting configurations\")\n    }\n\n\n    echo(){\n        console.log(\"SECHODSFLKAHJ\");\n    }\n}\n  \n  const instance = new SocketClientComponent();\n  //Object.freeze(instance);\n  \n  export default instance;\n  ","import React from \"react\"\nimport Link from '@material-ui/core/Link';\n\nfunction Home() {\n    return (\n      <div>\nBasic\n      </div>\n    );\n  };\n  \n\nexport default Home","import React, { useState, useEffect, Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport Link from '@material-ui/core/Link';\nimport SocketClientComponent from \"./SocketClientComponent\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    control: {\n      padding: theme.spacing(5),\n    },\n    table: {\n        minWidth: 150,\n      },\n  }));\n  \n\nfunction SubjectPool() {\n\n    const classes = useStyles();\n\n    const [subjectPoolIDs, setSubjectPoolIDs] = useState([]);\n    const [subjectPool, setSubjectPool] = useState({});\n    \n\n    useEffect(() => {\n        SocketClientComponent.getSubjectPool(setSubjectPoolIDs, setSubjectPool);\n      }, []);\n\n    return (\n      <div>\n        <Paper>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>Socket ID</TableCell>\n                        <TableCell>Connection Time</TableCell>\n                        <TableCell>Last Activity</TableCell>\n                        <TableCell>Current State</TableCell>\n                        <TableCell>Details</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {subjectPoolIDs.map((row) => (\n                        <TableRow key={row}>\n                        <TableCell component=\"th\" scope=\"row\">{row}</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">Connection Time</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">Last Activity</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">Current State</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">Details</TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n\n        </Paper>\n      </div>\n    );\n  };\n  \n\nexport default SubjectPool","import React, { useState, useEffect, Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport Link from '@material-ui/core/Link';\nimport SocketClientComponent from \"./SocketClientComponent\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    control: {\n      padding: theme.spacing(5),\n    },\n    table: {\n        minWidth: 150,\n      },\n  }));\n  \n\nfunction ComponentList() {\n    const classes = useStyles();\n\n    const [agents, setAgents] = useState([]);\n    const [institutions, setInstitutions] = useState([]);\n    const [environments, setEnvironments] = useState([]);\n\n    useEffect(() => {\n        console.log(\"STARTING SOMETHING HERE\");\n        SocketClientComponent.getComponentList(setAgents, setInstitutions, setEnvironments);\n        //SocketClientComponent.getComponentList();\n        // Some initialization logic here\n      }, []);\n    \n\n\n    return (\n      <div>\n<Grid\n  container\n  direction=\"row\"\n  justify=\"center\"\n  alignItems=\"center\"\n  spacing=\"2\"\n>\n            <Grid key=\"agents\" item>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>Agents</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {agents.map((row) => (\n                        <TableRow key={row}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row}\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n                </TableContainer>\n            </Grid>\n            <Grid key=\"institutions\" item>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>Institutions</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {institutions.map((row) => (\n                        <TableRow key={row}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row}\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n                </TableContainer>\n            </Grid>\n\n            <Grid key=\"environments\" item>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>Environments</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {environments.map((row) => (\n                        <TableRow key={row}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row}\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n                </TableContainer>\n            </Grid>\n\n    </Grid>\n      </div>\n    );\n  };\n  \n\nexport default ComponentList","import React, { useState, useEffect, Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SocketClientComponent from \"./SocketClientComponent\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    control: {\n      padding: theme.spacing(5),\n    },\n    table: {\n        minWidth: 150,\n      },\n  }));\n  \n\nfunction ExperimentConfigurations() {\n\n    let { path, url } = useRouteMatch();\n\n    const classes = useStyles();\n\n    const [configurations, setConfigurations] = useState([]);\n    const [configuration, setConfiguration] = useState(null);\n\n\n\n    useEffect(() => {\n        SocketClientComponent.getConfigurations(setConfigurations);\n      }, []);\n\n    return (\n      <div>\n        <Switch>\n            <Route exact path={path}>\n                <Paper>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                        <TableRow>\n                            <TableCell>Configuration</TableCell>\n                            <TableCell>Details</TableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {configurations.map((row) => (\n                            <TableRow key={row}>\n                            <TableCell component=\"th\" scope=\"row\">{row[0]}</TableCell>\n                            <TableCell component=\"th\" scope=\"row\"> <Link to={`${url}/${row[0]}`} onClick={() => {setConfiguration(row[1])}}>Details</Link></TableCell>\n                            </TableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                </Paper>\n            </Route>\n            <Route path={`${path}/:configuration`}>\n            <Paper>{configuration}</Paper>\n            </Route>\n      </Switch>\n        \n      </div>\n    );\n  };\n  \n\nexport default ExperimentConfigurations","import React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport { Link } from \"react-router-dom\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport PeopleIcon from '@material-ui/icons/People';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport SocketClientComponent from \"./components/SocketClientComponent\";\nimport Home from './components/Home';\nimport SubjectPool from './components/SubjectPool';\nimport ComponentList from './components/ComponentList';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport ExperimentConfigurations from './components/ExperimentConfigurations';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      <Link color=\"inherit\" href=\"https://github.com/gmucsn/mtree\">\n        mTree - Computational Economics Resarch\n      </Link>\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function App() {\n  useEffect(() => {\n    console.log(\"STARTING SOMETHING HERE\");\n    SocketClientComponent.echo();\n    SocketClientComponent.sendMessage();\n    // Some initialization logic here\n  }, []);\n\n\n\n  const classes = useStyles();\n  const [loadClient, setLoadClient] = useState(true);\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            mTree Admin\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <div>\n      <List>\n        <ListItem button component={Link} to=\"/\">\n          <ListItemIcon>\n            <DashboardIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </ListItem>\n\n        <ListItem button component={Link} to=\"/component_list\">\n          <ListItemIcon>\n            <LayersIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"MES Components\" />\n        </ListItem>\n\n        <ListItem button component={Link} to=\"/experiment_configurations\">\n          <ListItemIcon>\n            <AssignmentIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Experiment Configurations\" />\n        </ListItem>\n\n        \n\n\n        <ListItem button component={Link} to=\"/subject_pool\">\n          <ListItemIcon>\n          <PeopleIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Subject Pool\" />\n        </ListItem>\n        </List>\n  </div>\n        \n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Switch>\n              <Route path=\"/\" component={Home} exact />\n              <Route path=\"/subject_pool\" component={SubjectPool}  />\n              <Route path=\"/component_list\" component={ComponentList}  />\n              <Route path=\"/experiment_configurations\" component={ExperimentConfigurations}  />\n          </Switch>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n      <App />\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}