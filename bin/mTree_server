 #!/usr/bin/env python

from mTree.server.server import Server, MTreeController
from mTree.server.admin import admin_area
from mTree.microeconomic_system.agent import Agent
import pyfiglet

import importlib
import inspect
import os
import glob

import importlib.util
import sys

# For illustrative purposes.
import tokenize

import logging
import pythonjsonlogger

import sys
from datetime import timedelta
import os
import glob
import time
import traceback
from threading import Thread 
from mTree.server.actor_system_startup import ActorSystemStartup

import signal
from mTree.components import *


import atexit
from thespian.actors import *


@atexit.register
def goodbye():
    ActorSystem('multiprocQueueBase').shutdown()
    time.sleep(2)


def exit_gracefully(signum, frame):
    # restore the original signal handler as otherwise evil things will happen
    # in raw_input when CTRL+C is pressed, and our signal handler is not re-entrant
    signal.signal(signal.SIGINT, original_sigint)
    ActorSystem('multiprocQueueBase').shutdown()
    try:
        if raw_input("\nReally quit? (y/n)> ").lower().startswith('y'):
            sys.exit(1)

    except KeyboardInterrupt:
        print("Ok ok, quitting")
        sys.exit(1)

    # restore the exit gracefully handler here    
    signal.signal(signal.SIGINT, exit_gracefully)

original_sigint = signal.getsignal(signal.SIGINT)
signal.signal(signal.SIGINT, exit_gracefully)

ascii_banner = pyfiglet.figlet_format("mTree - Control")
print(ascii_banner)

import importlib.util
def import_source(module_name):
    module_file_path = module_name.__file__
    module_name = module_name.__name__

    module_spec = importlib.util.spec_from_file_location(
        module_name, module_file_path)
    module = importlib.util.module_from_spec(module_spec)
    module_spec.loader.exec_module(module)
    print(dir(module))

    msg = 'The {module_name} module has the following methods:' \
        ' {methods}'
    print(msg.format(module_name=module_name,
                     methods=dir(module)))

def import_plugins(plugins_package_directory_path, base_class=None, create_instance=True, filter_abstract=True):


    print("ATTEMPTING TO LOOK AT THINGS...")
    plugins_package_name = os.path.basename(plugins_package_directory_path)
    print(plugins_package_name)

    # -----------------------------
    # Iterate all python files within that directory
    plugin_file_paths = glob.glob(os.path.join(plugins_package_directory_path, "*.py"))
    print(os.path.join(plugins_package_directory_path, "*.py"))
    print(plugin_file_paths)
    print("trying to load all known files")
    for plugin_file_path in plugin_file_paths:
        print("\tExamining a file...: " + plugin_file_path)
        plugin_file_name = os.path.basename(plugin_file_path)
        print("\tplugin name")
        print("\t\t", plugin_file_path)
        module_name = os.path.splitext(plugin_file_name)[0]
        print("\t\t", module_name)
        if module_name.startswith("__"):
            continue

        # -----------------------------
        # Import python file

        print("\t\t\t->", module_name, " -- ", plugins_package_name)

        module_spec = importlib.util.spec_from_file_location(module_name, plugin_file_path)
        module = importlib.util.module_from_spec(module_spec)
        module_spec.loader.exec_module(module)
        print(dir(module))


        #module = importlib.import_module(module_name)#, package=plugins_package_name)



    '''
        # -----------------------------
        # Iterate items inside imported python file

        for item in dir(module):
            value = getattr(module, item)
            if not value:
                continue

            if not inspect.isclass(value):
                continue

            if filter_abstract and inspect.isabstract(value):
                continue

            if base_class is not None:
                if type(value) != type(base_class):
                    continue

            # -----------------------------
            # Instantiate / return type (depends on create_instance)

            yield value() if create_instance else value
    '''

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
#SCRIPT_DIR = "/repos/mTree_dev_folder"
plugins_directory_path = os.path.join(SCRIPT_DIR, 'components')
#plugins = import_plugins(plugins_directory_path, base_class=Agent)
plugins = import_plugins(os.path.join(os.getcwd(), 'mes'), base_class=Agent)
print("\t --> ", plugins)

plugins = import_plugins(plugins_directory_path, base_class=Agent)
print("\t 2 - --> ", plugins)


#def start_thespian():
#    actor_system = ActorSystemStartup()
#    #actor_system = ActorSystem('multiprocQueueBase',logDefs=logcfg)

#thread = Thread(target=start_thespian)
#thread.start()



print("mTree is launching")
server = Server()
server.run_server()
server.register_blueprint(admin_area)
